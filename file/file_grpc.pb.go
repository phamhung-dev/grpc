// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: file.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DownloadFileService_Download_FullMethodName = "/file.DownloadFileService/Download"
)

// DownloadFileServiceClient is the client API for DownloadFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadFileServiceClient interface {
	Download(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
}

type downloadFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadFileServiceClient(cc grpc.ClientConnInterface) DownloadFileServiceClient {
	return &downloadFileServiceClient{cc}
}

func (c *downloadFileServiceClient) Download(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, DownloadFileService_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadFileServiceServer is the server API for DownloadFileService service.
// All implementations must embed UnimplementedDownloadFileServiceServer
// for forward compatibility
type DownloadFileServiceServer interface {
	Download(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	mustEmbedUnimplementedDownloadFileServiceServer()
}

// UnimplementedDownloadFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadFileServiceServer struct {
}

func (UnimplementedDownloadFileServiceServer) Download(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedDownloadFileServiceServer) mustEmbedUnimplementedDownloadFileServiceServer() {}

// UnsafeDownloadFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadFileServiceServer will
// result in compilation errors.
type UnsafeDownloadFileServiceServer interface {
	mustEmbedUnimplementedDownloadFileServiceServer()
}

func RegisterDownloadFileServiceServer(s grpc.ServiceRegistrar, srv DownloadFileServiceServer) {
	s.RegisterService(&DownloadFileService_ServiceDesc, srv)
}

func _DownloadFileService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadFileServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadFileService_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadFileServiceServer).Download(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadFileService_ServiceDesc is the grpc.ServiceDesc for DownloadFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.DownloadFileService",
	HandlerType: (*DownloadFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _DownloadFileService_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file.proto",
}
